{"/home/travis/build/npmtest/node-npmtest-fontmin/test.js":"/* istanbul instrument in package npmtest_fontmin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fontmin/lib.npmtest_fontmin.js":"/* istanbul instrument in package npmtest_fontmin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fontmin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fontmin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fontmin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fontmin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fontmin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fontmin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fontmin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fontmin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fontmin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fontmin.__dirname + '/lib.npmtest_fontmin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/index.js":"/**\n * @file fontmin\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar combine = require('stream-combiner');\nvar concat = require('concat-stream');\nvar EventEmitter = require('events').EventEmitter;\nvar inherits = require('util').inherits;\nvar bufferToVinyl = require('buffer-to-vinyl');\nvar vfs = require('vinyl-fs');\n\n/**\n * Initialize Fontmin\n *\n * @constructor\n * @api public\n */\nfunction Fontmin() {\n    if (!(this instanceof Fontmin)) {\n        return new Fontmin();\n    }\n\n    EventEmitter.call(this);\n    this.streams = [];\n}\n\n/**\n * Inherit from `EventEmitter`\n * @type {Class}\n */\ninherits(Fontmin, EventEmitter);\n\n/**\n * Get or set the source files\n *\n * @param {Array|Buffer|string} file files to be optimized\n * @return {Object} fontmin\n * @api public\n */\nFontmin.prototype.src = function (file) {\n    if (!arguments.length) {\n        return this._src;\n    }\n\n    this._src = arguments;\n    return this;\n};\n\n/**\n * Get or set the destination folder\n *\n * @param {string} dir folder to written\n * @return {Object} fontmin\n * @api public\n */\nFontmin.prototype.dest = function (dir) {\n    if (!arguments.length) {\n        return this._dest;\n    }\n\n    this._dest = arguments;\n    return this;\n};\n\n/**\n * Add a plugin to the middleware stack\n *\n * @param {Function} plugin plugin\n * @return {Object} fontmin\n * @api public\n */\nFontmin.prototype.use = function (plugin) {\n    this.streams.push(typeof plugin === 'function' ? plugin() : plugin);\n    return this;\n};\n\n/**\n * Optimize files\n *\n * @param {Function} cb callback\n * @return {Stream} file stream\n * @api public\n */\nFontmin.prototype.run = function (cb) {\n    cb = cb || function () {};\n\n    var stream = this.createStream();\n\n    stream.on('error', cb);\n    stream.pipe(concat(cb.bind(null, null)));\n\n    return stream;\n};\n\n/**\n * Create stream\n *\n * @return {Stream} file stream\n * @api private\n */\nFontmin.prototype.createStream = function () {\n    this.streams.unshift(this.getFiles());\n\n    if (this.streams.length === 1) {\n        this.use(Fontmin.otf2ttf());\n        this.use(Fontmin.ttf2eot());\n        this.use(Fontmin.ttf2woff());\n        this.use(Fontmin.ttf2svg());\n        this.use(Fontmin.css());\n    }\n\n    if (this.dest()) {\n        this.streams.push(\n            vfs.dest.apply(vfs, this.dest())\n        );\n    }\n\n    return combine(this.streams);\n};\n\n/**\n * Get files\n *\n * @return {Stream} file stream\n * @api private\n */\nFontmin.prototype.getFiles = function () {\n\n    if (Buffer.isBuffer(this._src[0])) {\n        return bufferToVinyl.stream(this._src[0]);\n    }\n\n    return vfs.src.apply(vfs, this.src());\n};\n\n/**\n * plugins\n *\n * @type {Array}\n */\nFontmin.plugins = [\n    'glyph',\n    'ttf2eot',\n    'ttf2woff',\n    'ttf2svg',\n    'css',\n    'svg2ttf',\n    'svgs2ttf',\n    'otf2ttf'\n];\n\n// export pkged plugins\nFontmin.plugins.forEach(function (plugin) {\n    Fontmin[plugin] = require('./plugins/' + plugin);\n});\n\n/**\n * Module exports\n */\nmodule.exports = Fontmin;\n\n// exports util, mime\nmodule.exports.util = exports.util = require('./lib/util');\nmodule.exports.mime = exports.mime = require('./lib/mime-types');\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/plugins/glyph.js":"/**\n * @file glyph\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar _ = require('lodash');\nvar isTtf = require('is-ttf');\nvar through = require('through2');\nvar TTF = require('fonteditor-core').TTF;\nvar TTFReader = require('fonteditor-core').TTFReader;\nvar TTFWriter = require('fonteditor-core').TTFWriter;\nvar b2ab = require('b3b').b2ab;\nvar ab2b = require('b3b').ab2b;\nvar util = require('../lib/util');\n\n/**\n * getSubsetGlyfs\n *\n * @param  {ttfObject} ttf ttfobj\n * @param  {Array} subset subset unicode\n * @return {Array}     glyfs array\n */\nfunction getSubsetGlyfs(ttf, subset) {\n\n    var glyphs = [];\n\n    var indexList = ttf.findGlyf({\n        unicode: subset || []\n    });\n\n    if (indexList.length) {\n        glyphs = ttf.getGlyf(indexList);\n    }\n\n    glyphs.unshift(ttf.get().glyf[0]);\n\n    return glyphs;\n}\n\n\n/**\n * minifyFontObject\n *\n * @param  {Object} ttfObject    ttfObject\n * @param  {Array} subset         subset\n * @param  {Function=} plugin       use plugin\n * @return {Object}              ttfObject\n */\nfunction minifyFontObject(ttfObject, subset, plugin) {\n\n    // check null\n    if (subset.length === 0) {\n        return ttfObject;\n    }\n\n    // new TTF Object\n    var ttf = new TTF(ttfObject);\n\n    // get target glyfs then set\n    ttf.setGlyf(getSubsetGlyfs(ttf, subset));\n\n    // use plugin\n    if (_.isFunction(plugin)) {\n        plugin(ttf);\n    }\n\n    return ttf.get();\n}\n\n\n/**\n * minifyTtf\n *\n * @param  {Buffer|Object} contents         contents\n * @param  {Object} opts         opts\n * @return {Buffer}              buffer\n */\nfunction minifyTtf(contents, opts) {\n\n    opts = opts || {};\n\n    var ttfobj = contents;\n\n    if (Buffer.isBuffer(contents)) {\n        ttfobj = new TTFReader(opts).read(b2ab(contents));\n    }\n\n    var miniObj = minifyFontObject(\n        ttfobj,\n        opts.subset,\n        opts.use\n    );\n\n    var ttfBuffer = ab2b(\n        new TTFWriter(opts).write(miniObj)\n    );\n\n    return {\n        object: miniObj,\n        buffer: ttfBuffer\n    };\n\n}\n\n\n/**\n * glyph fontmin plugin\n *\n * @param {Object} opts opts\n * @param {string=} opts.text text\n * @param {boolean=} opts.basicText useBasicText\n * @param {boolean=} opts.hinting hint\n * @param {Function=} opts.use plugin\n * @return {Object} stream.Transform instance\n * @api public\n */\nmodule.exports = function (opts) {\n\n    opts = _.extend({hinting: true, trim: true}, opts);\n\n    // prepare subset\n    var subsetText = util.getSubsetText(opts);\n    opts.subset = util.string2unicodes(subsetText);\n\n\n    return through.ctor({\n        objectMode: true\n    }, function (file, enc, cb) {\n\n        // check null\n        if (file.isNull()) {\n            cb(null, file);\n            return;\n        }\n\n        // check stream\n        if (file.isStream()) {\n            cb(new Error('Streaming is not supported'));\n            return;\n        }\n\n        // check ttf\n        if (!isTtf(file.contents)) {\n            cb(null, file);\n            return;\n        }\n\n        try {\n\n            // write file buffer\n            var miniTtf = minifyTtf(\n                file.ttfObject || file.contents,\n                opts\n            );\n\n            file.contents = miniTtf.buffer;\n            file.ttfObject = miniTtf.object;\n\n            cb(null, file);\n\n        }\n        catch (err) {\n            cb(err);\n        }\n\n    });\n\n};\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/lib/util.js":"/**\n * @file util\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar fs = require('fs');\nvar path = require('path');\nvar _ = require('lodash');\n\n/**\n * getFontFolder\n *\n * @return {string} fontFolder\n */\nfunction getFontFolder() {\n    return path.resolve({\n        win32: '/Windows/fonts',\n        darwin: '/Library/Fonts',\n        linux: '/usr/share/fonts/truetype'\n    }[process.platform]);\n}\n\n/**\n * getFonts\n *\n * @param  {string} path path\n * @return {Array}      fonts\n */\nfunction getFonts() {\n    return fs.readdirSync(getFontFolder());\n}\n\n/**\n * getPureText\n *\n * @see https://msdn.microsoft.com/zh-cn/library/ie/2yfce773\n * @param  {string} str target text\n * @return {string}     pure text\n */\nfunction getPureText(str) {\n\n    return String(str)\n        .trim()\n        .replace(/[\\s]/g, '')\n        // .replace(/[\\f]/g, '')\n        // .replace(/[\\b]/g, '')\n        // .replace(/[\\n]/g, '')\n        // .replace(/[\\t]/g, '')\n        // .replace(/[\\r]/g, '')\n        .replace(/[\\u2028]/g, '')\n        .replace(/[\\u2029]/g, '');\n\n}\n\n/**\n * getUniqText\n *\n * @param  {string} str target text\n * @return {string}     uniq text\n */\nfunction getUniqText(str) {\n    return _.uniq(\n        str.split('')\n    ).join('');\n}\n\n\n/**\n * basic chars\n *\n * \"!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\"\n *\n * @type {string}\n */\nvar basicText = String.fromCharCode.apply(this, _.range(33, 126));\n\n/**\n * get subset text\n *\n * @param  {Object} opts opts\n * @return {string}      subset text\n */\nfunction getSubsetText(opts) {\n\n    var text = opts.text || '';\n\n    // trim\n    text && opts.trim && (text = getPureText(text));\n\n    // basicText\n    opts.basicText && (text += basicText);\n\n    return getUniqText(text);\n}\n\n/**\n * string to unicodes\n *\n * @param  {string} str string\n * @return {Array}      unicodes\n */\nfunction string2unicodes(str) {\n    return str.split('').map(function (text) {\n        return text.charCodeAt(0);\n    });\n}\n\n\n\nexports.getFontFolder = getFontFolder;\nexports.getFonts = getFonts;\nexports.getPureText = getPureText;\nexports.getUniqText = getUniqText;\nexports.getSubsetText = getSubsetText;\nexports.string2unicodes = string2unicodes;\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/plugins/ttf2eot.js":"/**\n * @file ttf2eot\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar isTtf = require('is-ttf');\nvar through = require('through2');\nvar ttf2eot = require('fonteditor-core').ttf2eot;\nvar b2ab = require('b3b').b2ab;\nvar ab2b = require('b3b').ab2b;\nvar replaceExt = require('replace-ext');\nvar _ = require('lodash');\n\nfunction compileTtf(buffer, cb) {\n    var output;\n    try {\n        output = ab2b(ttf2eot(b2ab(buffer)));\n    }\n    catch (ex) {\n        cb(ex);\n    }\n\n    output && cb(null, output);\n}\n\n\n/**\n * ttf2eot fontmin plugin\n *\n * @param {Object} opts opts\n * @return {Object} stream.Transform instance\n * @api public\n */\nmodule.exports = function (opts) {\n\n    opts = _.extend({clone: true}, opts);\n\n    return through.ctor({\n        objectMode: true\n    }, function (file, enc, cb) {\n\n        // check null\n        if (file.isNull()) {\n            cb(null, file);\n            return;\n        }\n\n        // check stream\n        if (file.isStream()) {\n            cb(new Error('Streaming is not supported'));\n            return;\n        }\n\n        // check ttf\n        if (!isTtf(file.contents)) {\n            cb(null, file);\n            return;\n        }\n\n        // clone\n        if (opts.clone) {\n            this.push(file.clone(false));\n        }\n\n        // replace ext\n        file.path = replaceExt(file.path, '.eot');\n\n        compileTtf(file.contents, function (err, buffer) {\n\n            if (err) {\n                cb(err);\n                return;\n            }\n\n            file.contents = buffer;\n            cb(null, file);\n        });\n\n    });\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/plugins/ttf2woff.js":"/**\n * @file ttf2woff\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar isTtf = require('is-ttf');\nvar through = require('through2');\nvar ttf2woff = require('fonteditor-core').ttf2woff;\nvar b2ab = require('b3b').b2ab;\nvar ab2b = require('b3b').ab2b;\nvar replaceExt = require('replace-ext');\nvar deflate = require('pako').deflate;\nvar _ = require('lodash');\n\nfunction compileTtf(buffer, options, cb) {\n    var output;\n    var ttf2woffOpts = {};\n\n    if (options.deflate) {\n        ttf2woffOpts.deflate = deflate;\n    }\n\n    try {\n        output = ab2b(\n            // fix: have problem in some android device, close deflate\n            ttf2woff(\n                b2ab(buffer),\n                ttf2woffOpts\n            )\n        );\n    }\n    catch (ex) {\n        cb(ex);\n    }\n\n    output && cb(null, output);\n}\n\n/**\n * ttf2woff fontmin plugin\n *\n * @param {Object} opts opts\n * @return {Object} stream.Transform instance\n * @api public\n */\nmodule.exports = function (opts) {\n\n    opts = _.extend({clone: true}, opts);\n\n    return through.ctor({\n        objectMode: true\n    }, function (file, enc, cb) {\n\n        // check null\n        if (file.isNull()) {\n            cb(null, file);\n            return;\n        }\n\n        // check stream\n        if (file.isStream()) {\n            cb(new Error('Streaming is not supported'));\n            return;\n        }\n\n        // check ttf\n        if (!isTtf(file.contents)) {\n            cb(null, file);\n            return;\n        }\n\n        // clone\n        if (opts.clone) {\n            this.push(file.clone(false));\n        }\n\n        // replace ext\n        file.path = replaceExt(file.path, '.woff');\n\n        compileTtf(file.contents, opts, function (err, buffer) {\n\n            if (err) {\n                cb(err);\n                return;\n            }\n\n            file.contents = buffer;\n            cb(null, file);\n        });\n\n    });\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/plugins/ttf2svg.js":"/**\n * @file ttf2svg\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar isTtf = require('is-ttf');\nvar through = require('through2');\nvar ttf2svg = require('fonteditor-core').ttf2svg;\nvar b2ab = require('b3b').b2ab;\nvar replaceExt = require('replace-ext');\nvar _ = require('lodash');\n\nfunction compileTtf(buffer, cb) {\n    var output;\n    try {\n        output = new Buffer(ttf2svg(b2ab(buffer)));\n    }\n    catch (ex) {\n        cb(ex);\n    }\n\n    output && cb(null, output);\n}\n\n/**\n * ttf2svg fontmin plugin\n *\n * @param {Object} opts opts\n * @return {Object} stream.Transform instance\n * @api public\n */\nmodule.exports = function (opts) {\n\n    opts = _.extend({clone: true}, opts);\n\n    return through.ctor({\n        objectMode: true\n    }, function (file, enc, cb) {\n\n        // check null\n        if (file.isNull()) {\n            cb(null, file);\n            return;\n        }\n\n        // check stream\n        if (file.isStream()) {\n            cb(new Error('Streaming is not supported'));\n            return;\n        }\n\n        // check ttf\n        if (!isTtf(file.contents)) {\n            cb(null, file);\n            return;\n        }\n\n        // clone\n        if (opts.clone) {\n            this.push(file.clone(false));\n        }\n\n        // replace ext\n        file.path = replaceExt(file.path, '.svg');\n\n        compileTtf(file.contents, function (err, buffer) {\n\n            if (err) {\n                cb(err);\n                return;\n            }\n\n            file.contents = buffer;\n            cb(null, file);\n        });\n\n    });\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/plugins/css.js":"/**\n * @file css\n * @author junmer\n */\n\n/* eslint-env node */\nvar _ = require('lodash');\nvar fs = require('fs');\nvar path = require('path');\nvar isTtf = require('is-ttf');\nvar through = require('through2');\nvar replaceExt = require('replace-ext');\nvar b2a = require('b3b').b2a;\n\n/**\n * tpl\n *\n * @type {string}\n */\nvar tpl = fs.readFileSync(\n    path.resolve(__dirname, '../lib/font-face.tpl')\n).toString('utf-8');\n\n/**\n * renderCss\n *\n * @type {function}\n */\nvar renderCss = _.template(tpl);\n\n\n/**\n * listUnicode\n *\n * @param  {Array} unicode unicode\n * @return {string}         unicode string\n */\nfunction listUnicode(unicode) {\n    return unicode.map(function (u) {\n        return '\\\\' + u.toString(16);\n    }).join(',');\n}\n\n/**\n * get glyf list from ttf obj\n *\n * @param {ttfObject} ttf ttfObject\n * @return {Object} icon obj\n */\nfunction getGlyfList(ttf) {\n\n    var glyfList = [];\n\n    // exclude empty glyf\n    var filtered = ttf.glyf.filter(function (g) {\n        return g.name !== '.notdef'\n            && g.name !== '.null'\n            && g.name !== 'nonmarkingreturn'\n            && g.unicode && g.unicode.length;\n    });\n\n    // format glyf info\n    filtered.forEach(function (g) {\n        glyfList.push({\n            code: '&#x' + g.unicode[0].toString(16) + ';',\n            codeName: listUnicode(g.unicode),\n            name: g.name || 'uni' + g.unicode[0].toString(16)\n        });\n    });\n\n    return {\n        glyfList: glyfList\n    };\n\n}\n\n/**\n * get font family name\n *\n * @param {Object} fontInfo font info object\n * @param {ttfObject} ttf ttfObject\n * @param {Object} opts opts\n * @return {string} font family name\n */\nfunction getFontFamily(fontInfo, ttf, opts) {\n    var fontFamily = opts.fontFamily;\n    // Call transform function\n    if (typeof fontFamily === 'function') {\n        fontFamily = fontFamily(_.cloneDeep(fontInfo), ttf);\n    }\n    return fontFamily || ttf.name.fontFamily || fontInfo.fontFile;\n}\n\n/**\n * Transform font family name\n * @callback FontFamilyTransform\n * @param {Object} font info object\n * @param {ttfObject} ttf ttfObject\n * @return {string} font family name\n */\n// function(fontInfo, ttfObject) { return \"Font Name\"; }\n\n/**\n * css fontmin plugin\n *\n * @param {Object} opts opts\n * @param {boolean=} opts.glyph     generate class for each glyph. default = false\n * @param {boolean=} opts.base64    inject base64\n * @param {string=} opts.iconPrefix icon prefix\n * @param {(string|FontFamilyTransform)=} opts.fontFamily fontFamily\n * @return {Object} stream.Transform instance\n * @api public\n */\nmodule.exports = function (opts) {\n    opts = opts || {};\n\n    return through.ctor({\n        objectMode: true\n    }, function (file, enc, cb) {\n\n        // check null\n        if (file.isNull()) {\n            cb(null, file);\n            return;\n        }\n\n        // check stream\n        if (file.isStream()) {\n            cb(new Error('Streaming is not supported'));\n            return;\n        }\n\n        // check ttf\n        if (!isTtf(file.contents)) {\n            cb(null, file);\n            return;\n        }\n\n        // clone\n        this.push(file.clone(false));\n\n        file.path = replaceExt(file.path, '.css');\n        var fontFile = path.basename(file.path, '.css');\n\n        // font data\n        var fontInfo = {\n            fontFile: fontFile,\n            fontPath: '',\n            base64: '',\n            glyph: false,\n            iconPrefix: 'icon',\n            local: false\n        };\n\n        // opts\n        _.extend(fontInfo, opts);\n\n        // ttf obj\n        var ttfObject = file.ttfObject || {\n            name: {}\n        };\n\n        // glyph\n        if (opts.glyph && ttfObject.glyf) {\n            _.extend(\n                fontInfo,\n                getGlyfList(ttfObject)\n            );\n        }\n\n        // font family\n        fontInfo.fontFamily = getFontFamily(fontInfo, ttfObject, opts);\n\n        // rewrite font family as filename\n        if (opts.asFileName) {\n            fontInfo.fontFamily = fontFile;\n        }\n\n        // base64\n        if (opts.base64) {\n            fontInfo.base64 = ''\n                + 'data:application/x-font-ttf;charset=utf-8;base64,'\n                + b2a(file.contents);\n        }\n\n        // local\n        if (fontInfo.local === true) {\n            fontInfo.local = fontInfo.fontFamily;\n        }\n\n        // render\n        var output = _.attempt(function (data) {\n            return new Buffer(renderCss(data));\n        }, fontInfo);\n\n        if (_.isError(output)) {\n            cb(output, file);\n        }\n        else {\n            file.contents = output;\n            cb(null, file);\n        }\n\n    });\n\n};\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/plugins/svg2ttf.js":"/**\n * @file svg2ttf\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar isSvg = require('is-svg');\nvar through = require('through2');\nvar TTFWriter = require('fonteditor-core').TTFWriter;\nvar svg2ttfobject = require('fonteditor-core').svg2ttfobject;\nvar ab2b = require('b3b').ab2b;\nvar replaceExt = require('replace-ext');\nvar _ = require('lodash');\n\n/**\n * svg2ttf fontmin plugin\n *\n * @param {Object} opts opts\n * @return {Object} stream.Transform instance\n * @api public\n */\nmodule.exports = function (opts) {\n\n    opts = _.extend({clone: true, hinting: true}, opts);\n\n    return through.ctor({\n        objectMode: true\n    }, function (file, enc, cb) {\n\n        // check null\n        if (file.isNull()) {\n            cb(null, file);\n            return;\n        }\n\n        // check stream\n        if (file.isStream()) {\n            cb(new Error('Streaming is not supported'));\n            return;\n        }\n\n        // check svg\n        if (!isSvg(file.contents)) {\n            cb(null, file);\n            return;\n        }\n\n        // clone\n        if (opts.clone) {\n            this.push(file.clone(false));\n        }\n\n        // replace ext\n        file.path = replaceExt(file.path, '.ttf');\n\n\n        // ttf buffer\n        var output;\n\n        try {\n\n            var ttfObj = svg2ttfobject(\n                file.contents.toString('utf-8')\n            );\n\n            output = ab2b(new TTFWriter(opts).write(ttfObj));\n\n        }\n        catch (ex) {\n            cb(ex);\n        }\n\n        if (output) {\n            file.contents = output;\n            cb(null, file);\n        }\n\n    });\n\n};\n\n\n\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/plugins/svgs2ttf.js":"/**\n * @file svgs2ttf\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar isSvg = require('is-svg');\nvar through = require('through2');\nvar path = require('path');\nvar replaceExt = require('replace-ext');\nvar ab2b = require('b3b').ab2b;\nvar _ = require('lodash');\nvar bufferToVinyl = require('buffer-to-vinyl');\nvar TTFWriter = require('fonteditor-core').TTFWriter;\nvar TTF = require('fonteditor-core').TTF;\nvar svg2ttfobject = require('fonteditor-core').svg2ttfobject;\nvar getEmptyttfObject = require('fonteditor-core/ttf/getEmptyttfObject');\n\n/**\n * SvgFont\n *\n * @constructor\n * @param {string} name filename\n * @param {Object} opts opts\n */\nfunction SvgFont(name, opts) {\n\n    this.opts = _.extend(\n        {\n            adjust: {\n                leftSideBearing: 0,\n                rightSideBearing: 0,\n                ajdustToEmBox: true,\n                ajdustToEmPadding: 0\n            },\n            name: {\n                fontFamily: name,\n                fontSubFamily: name,\n                uniqueSubFamily: name,\n                postScriptName: name\n            }\n        },\n        opts\n    );\n\n    // empty ttfobj\n    var ttfobj = getEmptyttfObject();\n\n    // for save name\n    ttfobj.post.format = 2;\n\n    // new TTF\n    this.ttf = new TTF(ttfobj);\n\n    // set name\n    this.ttf.setName(this.opts.name);\n\n    // unicode start\n    this.startCode = opts.startCode || 0xe001;\n\n}\n\n/**\n * add svg\n *\n * @param {string} name     svg basename\n * @param {buffer} contents svg contents\n */\nSvgFont.prototype.add = function (name, contents) {\n\n    var ttfObj = svg2ttfobject(\n        contents.toString('utf-8'),\n        {\n            combinePath: true\n        }\n    );\n\n    var glyf = ttfObj.glyf[0];\n\n    glyf.name = path.basename(name, '.svg');\n\n    if (!Array.isArray(glyf.unicode)) {\n        glyf.unicode = [this.startCode++];\n    }\n\n    this.ttf.addGlyf(glyf);\n\n};\n\n/**\n * compile ttf contents\n *\n */\nSvgFont.prototype.compile = function () {\n\n    if (this.opts.adjust) {\n        this.ttf.adjustGlyfPos(null, this.opts.adjust);\n        this.ttf.adjustGlyf(null, this.opts.adjust);\n    }\n\n    this.contents = ab2b(\n        new TTFWriter(\n            this.opts\n        )\n        .write(\n            this.ttf.ttf\n        )\n    );\n\n};\n\n\n/**\n * svgs2ttf fontmin plugin\n *\n * @param {string} file filename\n * @param {Object} opts opts\n * @param {string} opts.fontName font name\n * @return {Object} stream.Transform instance\n * @api public\n */\nmodule.exports = function (file, opts) {\n\n    if (!file) {\n        throw new Error('Missing file option for fontmin-svg2ttf');\n    }\n\n    opts = _.extend({hinting: true}, opts);\n\n    var firstFile;\n    var fileName;\n    var svgFont;\n\n    if (typeof file === 'string') {\n\n        // fix file ext\n        file = replaceExt(file, '.ttf');\n\n        // set file name\n        fileName = file;\n    }\n    else if (typeof file.path === 'string') {\n        fileName = path.basename(file.path);\n        firstFile = bufferToVinyl.file(null, fileName);\n    }\n    else {\n        throw new Error('Missing path in file options for fontmin-svg2ttf');\n    }\n\n\n    function bufferContents(file, enc, cb) {\n\n        // ignore empty files\n        if (file.isNull()) {\n            cb();\n            return;\n        }\n\n        // check stream\n        if (file.isStream()) {\n            this.emit('error', new Error('Streaming not supported'));\n            cb();\n            return;\n        }\n\n        // check svg\n        if (!isSvg(file.contents)) {\n            cb();\n            return;\n        }\n\n        // set first file if not already set\n        if (!firstFile) {\n            firstFile = file;\n        }\n\n        // construct SvgFont instance\n        if (!svgFont) {\n            var fontName = opts.fontName || path.basename(fileName, '.ttf');\n            svgFont = new SvgFont(fontName, opts);\n        }\n\n        // add file to SvgFont instance\n        svgFont.add(file.relative, file.contents);\n\n        cb();\n    }\n\n\n    function endStream(cb) {\n        // no files passed in, no file goes out\n        if (!firstFile || !svgFont) {\n            cb();\n            return;\n        }\n\n        var joinedFile;\n\n        // if file opt was a file path\n        // clone everything from the first file\n        if (typeof file === 'string') {\n            joinedFile = firstFile.clone({\n                contents: false\n            });\n\n            joinedFile.path = path.join(firstFile.base, file);\n        }\n        else {\n            joinedFile = firstFile;\n        }\n\n        // complie svgfont\n        svgFont.compile();\n\n        // set contents\n        joinedFile.contents = svgFont.contents;\n        joinedFile.ttfObject = svgFont.ttf.ttf;\n\n        this.push(joinedFile);\n        cb();\n    }\n\n    return through.obj(bufferContents, endStream);\n\n};\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/plugins/otf2ttf.js":"/**\n * @file otf2ttf\n * @author junmer\n */\n\n/* eslint-env node */\n\nvar isOtf = require('is-otf');\nvar through = require('through2');\nvar otf2ttfobject = require('fonteditor-core').otf2ttfobject;\nvar TTFWriter = require('fonteditor-core').TTFWriter;\nvar b2ab = require('b3b').b2ab;\nvar ab2b = require('b3b').ab2b;\nvar replaceExt = require('replace-ext');\nvar _ = require('lodash');\nvar util = require('../lib/util');\n\n/**\n * otf2ttf fontmin plugin\n *\n * @param {Object} opts opts\n * @return {Object} stream.Transform instance\n * @api public\n */\nmodule.exports = function (opts) {\n\n    opts = _.extend({clone: false, hinting: true}, opts);\n\n    // prepare subset\n    var subsetText = util.getSubsetText(opts);\n    opts.subset = util.string2unicodes(subsetText);\n\n    return through.ctor({\n        objectMode: true\n    }, function (file, enc, cb) {\n\n        // check null\n        if (file.isNull()) {\n            cb(null, file);\n            return;\n        }\n\n        // check stream\n        if (file.isStream()) {\n            cb(new Error('Streaming is not supported'));\n            return;\n        }\n\n        // check otf\n        if (!isOtf(file.contents)) {\n            cb(null, file);\n            return;\n        }\n\n        // clone\n        if (opts.clone) {\n            this.push(file.clone(false));\n        }\n\n        // replace ext\n        file.path = replaceExt(file.path, '.ttf');\n\n        // ttf info\n        var ttfBuffer;\n        var ttfObj;\n\n        // try otf2ttf\n        try {\n\n            ttfObj = otf2ttfobject(b2ab(file.contents), opts);\n\n            ttfBuffer = ab2b(new TTFWriter(opts).write(ttfObj));\n\n        }\n        catch (ex) {\n            cb(ex);\n        }\n\n        if (ttfBuffer) {\n            file.contents = ttfBuffer;\n            file.ttfObject = ttfObj;\n            cb(null, file);\n        }\n\n    });\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/lib/mime-types.js":"/**\n * @file mine types\n * @author junmer\n */\n\n/* eslint-env node */\n\nmodule.exports = exports = {\n    '.*': 'application/octet-stream',\n    'ttf': 'application/font-sfnt',\n    'otf': 'application/font-sfnt',\n    'woff': 'application/font-woff',\n    'woff2': 'application/font-woff2',\n    'eot': 'application/octet-stream',\n    'svg': 'image/svg+xml',\n    'svgz': 'image/svg+xml'\n};\n","/home/travis/build/npmtest/node-npmtest-fontmin/node_modules/fontmin/cli.js":"#!/usr/bin/env node\n\n/**\n * @file cli\n * @author junmer\n */\n\n/* eslint-env node */\n\n'use strict';\n\nvar fs = require('fs');\nvar meow = require('meow');\nvar path = require('path');\nvar stdin = require('get-stdin');\nvar Fontmin = require('./');\nvar _ = require('lodash');\n\nvar cli = meow({\n    help: [\n        'Usage',\n        '  $ fontmin <file> [<output>]',\n        '  $ fontmin <directory> [<output>]',\n        '  $ fontmin <file> > <output>',\n        '  $ cat <file> | fontmin > <output>',\n        '',\n        'Example',\n        '  $ fontmin fonts/* build',\n        '  $ fontmin fonts build',\n        '  $ fontmin foo.ttf > foo-optimized.ttf',\n        '  $ cat foo.ttf | fontmin > foo-optimized.ttf',\n        '',\n        'Options',\n        '  -t, --text                          require glyphs by text',\n        '  -b, --basic-text                    require glyphs with base chars',\n        '  -d, --deflate-woff                  deflate woff',\n        '  --font-family                       font-family for @font-face CSS',\n        '  --css-glyph                         generate class for each glyf. default = false',\n        '  -T, --show-time                     show time fontmin cost'\n    ].join('\\n')\n}, {\n    'boolean': [\n        'basic-text',\n        'show-time',\n        'deflate-woff',\n        'css-glyph',\n        'version'\n    ],\n    'string': [\n        'text',\n        'font-family'\n    ],\n    'alias': {\n        t: 'text',\n        b: 'basic-text',\n        d: 'deflate-woff',\n        T: 'show-time',\n        h: 'help',\n        v: 'version'\n    }\n});\n\n// version\nif (cli.flags.version) {\n    console.log(require('./package.json').version);\n    process.exit(0);\n}\n\nfunction isFile(path) {\n    if (/^[^\\s]+\\.\\w*$/.test(path)) {\n        return true;\n    }\n\n    try {\n        return fs.statSync(path).isFile();\n    }\n    catch (err) {\n        return false;\n    }\n}\n\n\nfunction run(src, dest) {\n\n    cli.flags.showTime && console.time('fontmin use');\n\n    var pluginOpts = _.extend(\n        {},\n        cli.flags,\n        {\n            deflate: cli.flags.deflateWoff,\n            glyph: cli.flags.cssGlyph\n        }\n    );\n\n    var fontmin = new Fontmin()\n        .src(src)\n        .use(Fontmin.otf2ttf(pluginOpts))\n        .use(Fontmin.glyph(pluginOpts))\n        .use(Fontmin.ttf2eot(pluginOpts))\n        .use(Fontmin.ttf2svg(pluginOpts))\n        .use(Fontmin.ttf2woff(pluginOpts))\n        .use(Fontmin.css(pluginOpts));\n\n    if (process.stdout.isTTY) {\n        fontmin.dest(dest ? dest : 'build');\n    }\n\n    fontmin.run(function (err, files) {\n        if (err) {\n            console.error(err.stack || err);\n            process.exit(1);\n        }\n\n        if (!process.stdout.isTTY) {\n            files.forEach(function (file) {\n                process.stdout.write(file.contents);\n            });\n        }\n\n        cli.flags.showTime && console.timeEnd('fontmin use');\n    });\n}\n\nif (process.stdin.isTTY) {\n    var src = cli.input;\n    var dest;\n\n    if (!cli.input.length) {\n        console.error([\n            'Provide at least one file to optimize',\n            '',\n            'Example',\n            '  fontmin font/* build',\n            '  fontmin foo.ttf > foo-optimized.ttf',\n            '  cat foo.ttf | fontmin > foo-optimized.ttf',\n            '',\n            'See `fontmin --help` for more information.'\n        ].join('\\n'));\n\n        process.exit(1);\n    }\n\n    if (src.length > 1 && !isFile(src[src.length - 1])) {\n        dest = src[src.length - 1];\n        src.pop();\n    }\n\n    src = src.map(function (s) {\n        if (!isFile(s) && fs.existsSync(s)) {\n            return path.join(s, '**/*');\n        }\n\n        return s;\n    });\n\n    run(src, dest);\n}\nelse {\n    stdin.buffer(run);\n}\n"}